#!/usr/bin/python3

##########################################################################
# Interpreter for the Lambda Calculus
from lambdacalc.LambdaCalc import *
from optparse import OptionParser
import sys

# FixMe: convert reduction algorithms from recursive to iterative ones.
sys.setrecursionlimit(5000)

parser = OptionParser()
parser.add_option("-f", "--file", dest="filename", help="path to lambda calc file", type=str)
(options, args) = parser.parse_args()

##########################################################################
# File mode
if options.filename:
    with open(options.filename) as f:
        expr = parse(f.read())
        if expr is None:
            sys.exit()
        print(decode(expr.red()))
    sys.exit()

##########################################################################
# REPL mode
import cmd
class LambdaCalcRepl(cmd.Cmd):
    prompt = '> '
    intro = """
λλλλλλλλλλλλλλλλλλλλλλλλλλλλλ
λλλ Welcome to LambdaCalc λλλ
λλλλλλλλλλλλλλλλλλλλλλλλλλλλλ
"""
    done = False
    def precmd(self, line):
        if line in ["quit", "quit()", "exit", "exit()", "EOF"]:
            sys.exit()
        try:
            expr = parse(line)
            if expr is None:
                return line
            print(decode(expr.red()))
        except Exception as e:
            print("parse error: %s" % e)
        return line
    def default(self, line):
        pass
try:
    LambdaCalcRepl().cmdloop()
except KeyboardInterrupt:
    pass
