#!/usr/bin/python3

##########################################################################
# Interpreter for the Lambda Calculus

from lambdacalc.LambdaCalc import *
from optparse import OptionParser
import sys

parser = OptionParser()
parser.add_option("-f", "--file", dest="filename", help="path to lambda calc file", type=str)
parser.add_option("-l", "--limit", dest="limit", help="max number of reductions to apply", type=int)
(options, args) = parser.parse_args()

##########################################################################
# File mode
if options.filename:
    with open(options.filename) as f:
        expr = parse(f.read())
        if expr is None:
            sys.exit()
        count = 0
        while not expr.normal():
            if options.limit is not None and count >= options.limit:
                sys.stderr.write("Error: reduction limit exceeded\n")
                sys.exit(-1)
            expr = expr.red()
            count += 1
        print(decode(expr))

##########################################################################
# REPL mode

import cmd

class LambdaCalcRepl(cmd.Cmd):
    prompt = '> '
    intro = """
λλλλλλλλλλλλλλλλλλλλλλλλλλλλλ
λλλ Welcome to LambdaCalc λλλ
λλλλλλλλλλλλλλλλλλλλλλλλλλλλλ
"""
    done = False
    def precmd(self, line):
        if line in ["quit", "quit()", "exit", "exit()", "EOF"]:
            sys.exit()
        try:
            expr = parse(line)
            if expr is None:
                return line
            expr = expr.bigRed()
            print(decode(expr))
        except Exception as e:
            print("parse error: %s" % e)
        return line
    def default(self, line):
        pass

LambdaCalcRepl().cmdloop()
