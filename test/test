#!/usr/bin/python3

import sys
import time
from optparse import OptionParser
from lambdacalc.LambdaCalc import *

def testReductions():
    print("Running reduction unit tests...")

    # Simple formulas
    print(str(reduce(Var("x"))))
    assert str(reduce(Var("x"))) == "x"
    assert str(reduce(Abs("x", Var("M")))) == "(Lx.M)"
    assert str(reduce(App(Var("M"), Var("N")))) == "(M N)"

    # Applications of variables
    assert str(reduce(App(Var("x"), Var("y")))) == "(x y)"
    assert str(reduce(App(Var("x"), Abs("x", Var("M"))))) == "(x (Lx.M))"
    assert str(reduce(App(Var("x"), App(Var("M"), Var("N"))))) == "(x (M N))"

    # Applications of basic abstractions
    assert str(reduce(App(Abs("x", Var("x")), Var("x")))) == "x"
    assert str(reduce(App(Abs("x", Var("x")), Abs("x", Var("x"))))) == "(Lx.x)"
    assert str(reduce(App(Abs("x", Var("x")), App(Var("M"), Var("N"))))) == "(M N)"

    # Application of abstraction with capture-avoiding substitution
    assert str(reduce(App(Abs("x", Var("M")), Var("x")))) == "M"
    assert str(reduce(App(Abs("x", Var("M")), Var("z")))) == "M"
    assert str(reduce(App(Abs("x", Var("x")), Var("r")))) == "r"
    assert str(reduce(App(Abs("x", Var("y")), Var("r")))) == "y"
    assert str(reduce(App(Abs("x", App(Var("t"), Var("s"))), Var("r")))) == "(t s)"
    assert str(reduce(App(Abs("x", App(Var("x"), Var("x"))), Var("r")))) == "(r r)"
    assert str(reduce(App(Abs("x", Abs("x", Var("t"))), Var("r")))) == "(Lx.t)"
    body = Abs("x", App(Var("x"), Var("y")))
    abst = Abs("y", body)
    assert str(reduce(App(abst, Var("x")))) == "(L@0.(@0 x))" # renaming example (alpha-conversion)
    resetFresh()

    # Application of applications
    assert str(reduce(App(App(Var("M"), Var("N")), Var("x")))) == "((M N) x)"
    assert str(reduce(App(App(Var("M"), Var("N")), Abs("x", Var("x"))))) == "((M N) (Lx.x))"
    assert str(reduce(App(App(Var("M"), Var("N")), App(Var("A"), Var("B"))), memoize=False)) =="((M N) (A B))"

    print("Unit tests for reductions passed!")

def testChurchEncoding():
    print("Running Church encoding unit tests...")

    # Test encoding
    zero = "(Lf.(Lx.x))"
    one = "(Lf.(Lx.(f x)))"
    two = "(Lf.(Lx.(f (f x))))"
    three = "(Lf.(Lx.(f (f (f x)))))"
    assert str(encodeI(0)) == zero
    assert str(encodeI(1)) == one
    assert str(encodeI(2)) == two
    assert str(encodeI(3)) == three

    # Test decoding
    assert decodeI(parse(zero)) == 0
    assert decodeI(parse(one)) == 1
    assert decodeI(parse(two)) == 2
    assert decodeI(parse(three)) == 3

    # Test inverse property for encodeI/decodeI
    assert decodeI(encodeI(0)) == 0
    assert decodeI(encodeI(1)) == 1
    assert decodeI(encodeI(2)) == 2
    assert decodeI(encodeI(3)) == 3
    assert str(encodeI(decodeI(parse(zero)))) == zero
    assert str(encodeI(decodeI(parse(one)))) == one
    assert str(encodeI(decodeI(parse(two)))) == two
    assert str(encodeI(decodeI(parse(three)))) == three
    print("Unit tests for Church encodings passed!")

def testInfiniteLoop():
    print("Running infinite loop tests...")
    infloop = parse("((Lx.(x x)) (Lx.(x x)))")
    try:
        reduce(infloop)
        assert False
    except RecursionError:
        pass
    try:
        reduce(infloop)
        assert False
    except RecursionError:
        pass
    print("Infinite loop tests passed!")

def testCanonicalForm():
    print("Running canonical form tests...")
    f = parse("a b (Lx.Lx.x y) (Lz.Lx.z x)")
    print(canon(f))
    f = parse("v n (Lp.Lp.p z) (Li.Lj.i j)")
    print(canon(f))

parser = OptionParser()
parser.add_option("-f", "--file", dest="filename", help="path to lambda calc file", type=str)
(options, args) = parser.parse_args()
if options.filename:
    print("Running test file `%s`..." % options.filename)
    with open(options.filename) as f:
        rawInput = f.read()
        start = time.time()
        print("Raw input: %s" % rawInput[0:-1])
        parsedExpr = parse(rawInput)
        if parsedExpr is not None:
            print("Parsed expression: %s" % parsedExpr)
            redExpr = reduce(parsedExpr, True)
            print("Reduced expression: %s" % decode(redExpr))
        else:
            print("Parsed empty expression")
        end = time.time()
    print("Done in %ss" % int(end - start))
else:
    print()
    print("Running unit tests...")
    testReductions()
    testChurchEncoding()
    testInfiniteLoop()
    testCanonicalForm()
    print("Done")

